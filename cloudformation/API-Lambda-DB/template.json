{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
      "LambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
              "Code": {
                  "ZipFile": "console.log('Loading DynamoDB Lambda function');\nvar AWS = require('aws-sdk');\nvar dynamo = new AWS.DynamoDB.DocumentClient();\nexports.handler = function(event, context, callback) {\n//console.log('Received event:', JSON.stringify(event, null, 2));\nvar operation = event.operation;\nif (event.tableName) {\nevent.payload.TableName = event.tableName;\n}\nswitch (operation) {\ncase 'create':\ndynamo.put(event.payload, callback);\nbreak;\ncase 'read':\ndynamo.get(event.payload, callback);\nbreak;\ncase 'update':\ndynamo.update(event.payload, callback);\nbreak;\ncase 'delete':\ndynamo.delete(event.payload, callback);\nbreak;\ncase 'list':\ndynamo.scan(event.payload, callback);\nbreak;\ncase 'eventsuser':\ndynamo.scan(event.eventpayload, (eventErr, eventData) => {\nif (eventErr) {\nconsole.log({\n\"eventError\": eventErr\n});\n} else {\nconsole.log({\n\"success\": 'Event scan succeeded!',\n\"data\": eventData\n})\ndynamo.get(event.userpayload, (userErr, userData) => {\nif (userErr) {\nconsole.log({\n\"userError\": userErr\n});\n} else {\nconsole.log({\n\"success\": 'user get succeeded!',\n\"data\": userData\n})\ncallback(null, {\nevent: eventData,\nuser: userData\n})\n}\n});\n}\n});\nbreak;\ncase 'joinEvent':\ndynamo.update(event.userpayload, (userErr, userData) => {\nif (userErr) {\nconsole.log({\n\"userError\": userErr\n});\n} else {\ndynamo.update(event.eventpayload, (eventErr, eventData) => {\nif (eventErr) {\nconsole.log({\n\"eventError\": eventErr\n});\n} else {\nconsole.log({\n\"success\": 'event update succeeded!',\n\"data\": eventData\n})\ncallback(null, {\nevent: eventData,\nuser: userData\n})\n}\n})\n}\n});\nbreak;\ncase 'leaveEvent':\nevent.eventpayload.TableName = \"Events_api-lambda-db\"\ndynamo.get(event.eventpayload, function(err, data) {\nif (err) {\ncallback(err, null);\n} else {\nvar indexOfUser = data.Item.participants.findIndex(i => i === event.userID);\nconsole.log('The index of the user is ' + indexOfUser);\nvar updateExpressionString = \"REMOVE #participants[\" + indexOfUser + \"]\"\nlet paramsdelete = {\nExpressionAttributeNames: {\n\"#participants\": \"participants\"\n},\nKey: {\nid: event.eventID\n},\nTableName: 'Events_api-lambda-db',\nUpdateExpression: updateExpressionString,\nReturnValues: \"ALL_NEW\",\n};\n\ndynamo.update(paramsdelete, function(err, data) {\nif (err) {\ncallback(err, null);\n} else {\nevent.userpayload.TableName = \"User_tablev2\"\ndynamo.get(event.userpayload, function(err, data) {\nif (err) {\ncallback(err, null);\n} else {\nvar indexOfEvent = data.Item.upcomingEvents.findIndex(i => i === event.eventID);\nconsole.log('The index of the event is ' + indexOfEvent);\nvar updateExpressionString = \"REMOVE #upcomingEvents[\" + indexOfEvent + \"]\"\n\nlet paramsdelete = {\nExpressionAttributeNames: {\n\"#upcomingEvents\": \"upcomingEvents\"\n},\nKey: {\nid: event.userID\n},\nTableName: 'User_tablev2',\nUpdateExpression: updateExpressionString,\nReturnValues: \"ALL_NEW\",\n};\ndynamo.update(paramsdelete, function(err, data) {\nif (err) {\ncallback(err, null);\n} else {\ncallback(null, data);\n}\n});\n\n}\n});\ncallback(null, data);\n}\n});\n\n}\n});\nbreak;\ncase 'getApprovedEvents':\ndynamo.scan(event.payload, (err, data) => {\nif (err) {\nconsole.log('error scanning for events', err)\n} else {\nlet approvedEvents = []\ndata.Items.forEach(e => {\nif (e.approved == true && e.public == true) {\napprovedEvents.push(e)\n\n} else if (e.approved != undefined && e.approved[0] == true && e.public == true) {\napprovedEvents.push(e)\n}\n\n})\ncallback(null, {\nevents: approvedEvents\n})\n}\n})\nbreak;\ncase 'getNotApprovedEvents':\ndynamo.scan(event.payload, (err, data) => {\nif (err) {\nconsole.log('error scanning for events', err)\n} else {\nlet approvedEvents = []\ndata.Items.forEach(e => {\nif (e.approved == false) {\napprovedEvents.push(e)\n}\n})\ncallback(null, {\nevents: approvedEvents\n})\n}\n})\nbreak;\ncase 'approveEvent':\nevent.payload[\"UpdateExpression\"] = \"set approved = :i\";\nevent.payload[\"ExpressionAttributeValues\"] = {\n\":i\": [true]\n};\n\ndynamo.update(event.payload, callback);\n\nbreak;\ncase 'getNames':\nlet result = {}\ndynamo.scan(event.payload, (err, data) => {\nif (!err) {\ndata.Items.forEach(e => {\nif (event.payload.ids.includes(e.id)) {\nresult[e.id] = e.name\n}\n})\ncallback(null, result)\n} else {\nconsole.log(\"error scanning db\", err)\ncallback(err, null)\n}\n});\nbreak;\ncase 'setFeatured':\nevent.payload[\"UpdateExpression\"] = \"set featured = :i\";\nevent.payload[\"ExpressionAttributeValues\"] = {\n\":i\": true\n};\nevent.payload[\"TableName\"] = \"Events_api-lambda-db\"\ndynamo.update(event.payload, (err, data) => {\nif (!err) {\ncallback(null, data)\n} else {\nconsole.log(\"error updating item\", err)\ncallback(err, null)\n}\n});\nbreak;\ncase 'setNotFeatured':\nevent.payload[\"UpdateExpression\"] = \"set featured = :i\";\nevent.payload[\"ExpressionAttributeValues\"] = {\n\":i\": false\n};\nevent.payload[\"TableName\"] = \"Events_api-lambda-db\"\ndynamo.update(event.payload, (err, data) => {\nif (!err) {\ncallback(null, data)\n} else {\nconsole.log(\"error updating item\", err)\ncallback(err, null)\n}\n});\nbreak;\ncase 'getAllFeatured':\nevent.payload.TableName = \"Events_api-lambda-db\"\ndynamo.scan(event.payload, (err, data) => {\nif (!err) {\nlet result = []\nlet allEvents = data[\"Items\"]\nallEvents.forEach(e => {\nif (e.featured == true) {\nresult.push(e)\n\n} else if (e.featured != undefined && e.featured[0] == true) {\nresult.push(e)\n}\ncallback(null, {\nevents: result\n})\n})\n} else {\nconsole.log(\"error updating item\", err)\ncallback(err, null)\n}\n});\nbreak;\ncase 'sendEmail':\nvar params = {\nDestination: {\n/* required */\nToAddresses: [\nevent.payload.toAddress,\n/* more items */\n]\n},\nMessage: {\n/* required */\nBody: {\n/* required */\nHtml: {\nCharset: \"UTF-8\",\nData: event.payload.body\n},\n// Text: {\n//   Charset: \"UTF-8\",\n//   Data: event.payload.body\n// }\n},\nSubject: {\nCharset: 'UTF-8',\nData: event.payload.subject\n}\n},\nSource: 'platinumvolunteers@gmail.com',\n/* required */\nReplyToAddresses: [\n'platinumvolunteers@gmail.com',\n/* more items */\n],\n};\n\nvar sendPromise = new AWS.SES({\napiVersion: '2010-12-01'\n}).sendEmail(params).promise();\n\n// Handle promise's fulfilled/rejected states\nsendPromise.then(\nfunction(data) {\nconsole.log(data.MessageId);\ncallback(null, \"Success!\")\n}).catch(\nfunction(err) {\nconsole.error(err, err.stack);\n});\n\nbreak;\n\ncase 'getCheckIn':\ndynamo.get(event.eventpayload, function(eventErr, eventData) {\nif (eventErr) {\nconsole.log({\n\"eventError\": eventErr\n});\ncallback(eventErr, null);\n} else {\nconsole.log({\n\"success\": 'Event scan succeeded!',\n\"data\": eventData\n})\ndynamo.get(event.eventpayload, (eventErr, eventData) => {\nif (eventErr) {\nconsole.log({\n\"eventError\": eventErr\n});\ncallback(eventErr, null);\n} else {\ndynamo.get(event.userpayload, (userErr, userData) => {\nif (userErr) {\nconsole.log({\n\"userError\": userErr\n});\ncallback(userErr, null);\n} else {\nconsole.log({\n\"success\": 'user get succeeded!',\n\"data\": userData\n})\n\nlet checkInMap = {}\nfor (var value in eventData.Item.checkIn) {\ncheckInMap[value] = eventData.Item.checkIn[value];\n}\n\nlet IDMap = {}\nfor (var value in eventData.Item.participantIDs) {\nIDMap[value] = eventData.Item.participantIDs[value];\n}\n\n\n\nif (checkInMap[event.userpayload.Key.id] != null) {\ncallback(null, {\ncheckIn: checkInMap[event.userpayload.Key.id],\neventUserID: IDMap[event.userpayload.Key.id]\n})\n} else {\nconsole.log(\"This User is not part of this event\");\ncallback(null, {\nevent: null,\nuser: null\n})\n\n}\n}\n\n});\n}\n});\n}\n});\nbreak;\n\ncase 'checkIn':\ndynamo.get(event.eventpayload, function(eventErr, eventData) {\nif (eventErr) {\nconsole.log({\n\"eventError\": eventErr\n});\ncallback(eventErr, null);\n} else {\nconsole.log({\n\"success\": 'Event scan succeeded!',\n\"data\": eventData\n})\ndynamo.get(event.eventpayload, (eventErr, eventData) => {\nif (eventErr) {\nconsole.log({\n\"eventError\": eventErr\n});\ncallback(eventErr, null);\n} else {\ndynamo.get(event.userpayload, (userErr, userData) => {\nif (userErr) {\nconsole.log({\n\"userError\": userErr\n});\ncallback(userErr, null);\n} else {\nconsole.log({\n\"success\": 'user get succeeded!',\n\"data\": userData\n})\nif (eventData.Item.checkIn[event.userpayload.Key.id] != null) {\nvar checkedIn = eventData.Item.checkIn[event.userpayload.Key.id];\nvar eventUserID = eventData.Item.participantIDs[event.userpayload.Key.id];\nlet checkInMap = {}\nfor (var value in eventData.Item.checkIn) {\ncheckInMap[value] = eventData.Item.checkIn[value];\n}\ncheckInMap[event.userpayload.Key.id] = true;\nconsole.log(\"Test \" + checkInMap)\nevent.eventpayload[\"UpdateExpression\"] = 'SET #checkIn = :i';\nevent.eventpayload[\"ExpressionAttributeNames\"] = {\n'#checkIn': \"checkIn\"\n}\nevent.eventpayload[\"ExpressionAttributeValues\"] = {\n\":i\": checkInMap\n};\nevent.eventpayload[\"TableName\"] = \"Events_api-lambda-db\"\nconsole.log(eventData.Item)\ndynamo.update(event.eventpayload, (err, data) => {\nif (!err) {\nconsole.log(eventData.Item.checkIn[event.userpayload.Key.id])\ncallback(null, data)\n} else {\nconsole.log(\"error Check in status\", err)\ncallback(err, null)\n}\n})\ncallback(null, {\ncheckedIn: checkedIn,\neventUserID: eventUserID\n})\n} else {\nconsole.log(\"This User is not part of this event\");\ncallback(null, {\nevent: null,\nuser: null\n})\n}\n}\n});\n}\n});\n}\n});\nbreak;\ncase 'checkIn':\ndynamo.get(event.eventpayload, function(eventErr, eventData) {\nif (eventErr) {\nconsole.log({\n\"eventError\": eventErr\n});\ncallback(eventErr, null);\n} else {\nconsole.log({\n\"success\": 'Event scan succeeded!',\n\"data\": eventData\n})\ndynamo.get(event.eventpayload, (eventErr, eventData) => {\nif (eventErr) {\nconsole.log({\n\"eventError\": eventErr\n});\ncallback(eventErr, null);\n} else {\ndynamo.get(event.userpayload, (userErr, userData) => {\nif (userErr) {\nconsole.log({\n\"userError\": userErr\n});\ncallback(userErr, null);\n} else {\nconsole.log({\n\"success\": 'user get succeeded!',\n\"data\": userData\n})\nif (eventData.Item.checkIn[event.userpayload.Key.id] != null) {\nvar checkedIn = eventData.Item.checkIn[event.userpayload.Key.id];\nvar eventUserID = eventData.Item.participantIDs[event.userpayload.Key.id];\nlet checkInMap = {}\nfor (var value in eventData.Item.checkIn) {\ncheckInMap[value] = eventData.Item.checkIn[value];\n}\ncheckInMap[event.userpayload.Key.id] = tr;\nconsole.log(\"Test \" + checkInMap)\nevent.eventpayload[\"UpdateExpression\"] = 'SET #checkIn = :i';\nevent.eventpayload[\"ExpressionAttributeNames\"] = {\n'#checkIn': \"checkIn\"\n}\nevent.eventpayload[\"ExpressionAttributeValues\"] = {\n\":i\": checkInMap\n};\nevent.eventpayload[\"TableName\"] = \"Events_api-lambda-db\"\nconsole.log(eventData.Item)\ndynamo.update(event.eventpayload, (err, data) => {\nif (!err) {\nconsole.log(eventData.Item.checkIn[event.userpayload.Key.id])\ncallback(null, data)\n} else {\nconsole.log(\"error Check in status\", err)\ncallback(err, null)\n}\n})\ncallback(null, {\ncheckedIn: checkedIn,\neventUserID: eventUserID\n})\n} else {\nconsole.log(\"This User is not part of this event\");\ncallback(null, {\nevent: null,\nuser: null\n})\n}\n}\n});\n}\n});\n}\n});\nbreak;\ncase 'checkOut':\ndynamo.get(event.eventpayload, function(eventErr, eventData) {\nif (eventErr) {\nconsole.log({\n\"eventError\": eventErr\n});\ncallback(eventErr, null);\n} else {\nconsole.log({\n\"success\": 'Event scan succeeded!',\n\"data\": eventData\n})\ndynamo.get(event.eventpayload, (eventErr, eventData) => {\nif (eventErr) {\nconsole.log({\n\"eventError\": eventErr\n});\ncallback(eventErr, null);\n} else {\ndynamo.get(event.userpayload, (userErr, userData) => {\nif (userErr) {\nconsole.log({\n\"userError\": userErr\n});\ncallback(userErr, null);\n} else {\nconsole.log({\n\"success\": 'user get succeeded!',\n\"data\": userData\n})\nif (eventData.Item.checkIn[event.userpayload.Key.id] != null) {\nvar checkedIn = eventData.Item.checkIn[event.userpayload.Key.id];\nvar eventUserID = eventData.Item.participantIDs[event.userpayload.Key.id];\nlet checkInMap = {}\nfor (var value in eventData.Item.checkIn) {\ncheckInMap[value] = eventData.Item.checkIn[value];\n}\ncheckInMap[event.userpayload.Key.id] = false;\nconsole.log(\"Test \" + checkInMap)\nevent.eventpayload[\"UpdateExpression\"] = 'SET #checkIn = :i';\nevent.eventpayload[\"ExpressionAttributeNames\"] = {\n'#checkIn': \"checkIn\"\n}\nevent.eventpayload[\"ExpressionAttributeValues\"] = {\n\":i\": checkInMap\n};\nevent.eventpayload[\"TableName\"] = \"Events_api-lambda-db\"\nconsole.log(eventData.Item)\ndynamo.update(event.eventpayload, (err, data) => {\nif (!err) {\nconsole.log(eventData.Item.checkIn[event.userpayload.Key.id])\ncallback(null, data)\n} else {\nconsole.log(\"error Check in status\", err)\ncallback(err, null)\n}\n})\ncallback(null, {\ncheckedIn: checkedIn,\neventUserID: eventUserID\n})\n} else {\nconsole.log(\"This User is not part of this event\");\ncallback(null, {\nevent: null,\nuser: null\n})\n}\n}\n});\n}\n});\n}\n});\nbreak;\n\n\n\ndefault:\ncallback('Unknown operation: ${event.operation}');\n};\n\n\n};"
              },
              "FunctionName": {
                  "Ref": "LambdaFuncName"
              },
              "Handler": "index.handler",
              "Runtime": "nodejs12.x",
              "Role": {
                  "Fn::GetAtt": [
                      "IAMRole",
                      "Arn"
                  ]
              }
          },
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "a559df6f-9edd-4b46-ba7a-34fb95eba56c"
              }
          }
      },
      "EventsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
              "TableName": {
                  "Ref": "EventsTableName"
              },
              "AttributeDefinitions": [
                  {
                      "AttributeName": "id",
                      "AttributeType": "N"
                  }
              ],
              "KeySchema": [
                  {
                      "AttributeName": "id",
                      "KeyType": "HASH"
                  }
              ],
              "ProvisionedThroughput": {
                  "ReadCapacityUnits": "5",
                  "WriteCapacityUnits": "5"
              }
          },
          "DependsOn": [
              "IAMRole"
          ],
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "1af8b25f-5112-4a93-a461-29975f3c05df"
              }
          }
      },
      "RestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
              "Name": {
                  "Ref": "APIName"
              }
          },
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "7d62156c-684e-4199-95e4-3ada5992a375"
              }
          },
          "DependsOn": [
              "LambdaFunction"
          ]
      },
      "UsersResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
              "ParentId": {
                  "Fn::GetAtt": [
                      "RestApi",
                      "RootResourceId"
                  ]
              },
              "PathPart": "users",
              "RestApiId": {
                  "Ref": "RestApi"
              }
          },
          "DependsOn": [
              "RestApi"
          ],
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "82b4d9cd-c689-42f1-8474-54c4ba728b8c"
              }
          }
      },
      "EventsResource": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
              "RestApiId": {
                  "Ref": "RestApi"
              },
              "ParentId": {
                  "Fn::GetAtt": [
                      "RestApi",
                      "RootResourceId"
                  ]
              },
              "PathPart": "events"
          },
          "DependsOn": [
              "RestApi"
          ],
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "82b4d9cd-c689-42f1-8474-54c4ba728b8c"
              }
          }
      },
      "RestApiDeployment": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
              "RestApiId": {
                  "Ref": "RestApi"
              },
              "StageName": "dev"
          },
          "DependsOn": [
              "UsersPOST",
              "EventsPOST"
          ],
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "973f2e9a-d6f7-4287-8455-c5d73141b491"
              }
          }
      },
      "RestApiPermissions": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
              "Action": "lambda:InvokeFunction",
              "FunctionName": {
                  "Fn::GetAtt": [
                      "LambdaFunction",
                      "Arn"
                  ]
              },
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                  "Fn::Join": [
                      "",
                      [
                          "arn:aws:execute-api:",
                          {
                              "Ref": "AWS::Region"
                          },
                          ":",
                          {
                              "Ref": "AWS::AccountId"
                          },
                          ":",
                          {
                              "Ref": "RestApi"
                          },
                          "/*"
                      ]
                  ]
              }
          },
          "DependsOn": [
              "RestApiDeployment"
          ],
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "e9e6d3cd-f38a-4859-bb18-11b0fb75fa31"
              }
          }
      },
      "IAMRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
              "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": [
                                  "lambda.amazonaws.com"
                              ]
                          },
                          "Action": [
                              "sts:AssumeRole"
                          ]
                      }
                  ]
              },
              "Path": "/",
              "Policies": [
                  {
                      "PolicyName": "Policy_api-lambda-db",
                      "PolicyDocument": {
                          "Version": "2012-10-17",
                          "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "dynamodb:BatchGetItem",
                                      "dynamodb:BatchWriteItem",
                                      "dynamodb:TagResource",
                                      "dynamodb:UntagResource",
                                      "dynamodb:PutItem",
                                      "dynamodb:DeleteItem",
                                      "dynamodb:GetItem",
                                      "dynamodb:Scan",
                                      "dynamodb:Query",
                                      "dynamodb:UpdateItem"
                                  ],
                                  "Resource": "*"
                              },
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "logs:CreateLogStream",
                                      "logs:CreateLogGroup",
                                      "logs:PutLogEvents"
                                  ],
                                  "Resource": "*"
                              }
                          ]
                      }
                  }
              ]
          },
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "e956449d-8100-4eca-9949-cde040b8e62b"
              }
          }
      },
      "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
              "TableName": {
                  "Ref": "UsersTableName"
              },
              "AttributeDefinitions": [
                  {
                      "AttributeName": "id",
                      "AttributeType": "N"
                  }
              ],
              "KeySchema": [
                  {
                      "AttributeName": "id",
                      "KeyType": "HASH"
                  }
              ],
              "ProvisionedThroughput": {
                  "ReadCapacityUnits": "5",
                  "WriteCapacityUnits": "5"
              }
          },
          "DependsOn": [
              "IAMRole"
          ],
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "d77d983a-9bde-4bee-8d88-d7273b3e1c31"
              }
          }
      },
      "UsersPOST": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
              "RestApiId": {
                  "Ref": "RestApi"
              },
              "ResourceId": {
                  "Ref": "UsersResource"
              },
              "HttpMethod": "POST",
              "AuthorizationType": "NONE",
              "MethodResponses": [
                  {
                      "StatusCode": 200
                  }
              ],
              "Integration": {
                  "Type": "AWS",
                  "IntegrationResponses": [
                      {
                          "StatusCode": 200
                      }
                  ],
                  "IntegrationHttpMethod": "POST",
                  "Uri": {
                      "Fn::Sub": [
                          "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations",
                          {
                              "LambdaFuncNameArn": {
                                  "Fn::GetAtt": [
                                      "LambdaFunction",
                                      "Arn"
                                  ]
                              }
                          }
                      ]
                  }
              }
          },
          "DependsOn": [
              "RestApi"
          ],
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "d50dc807-8889-4bd0-bbc4-b21a4c01cfb8"
              }
          }
      },
      "EventsPOST": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
              "RestApiId": {
                  "Ref": "RestApi"
              },
              "ResourceId": {
                  "Ref": "EventsResource"
              },
              "HttpMethod": "POST",
              "AuthorizationType": "NONE",
              "MethodResponses": [
                  {
                      "StatusCode": 200
                  }
              ],
              "Integration": {
                  "Type": "AWS",
                  "IntegrationResponses": [
                      {
                          "StatusCode": 200
                      }
                  ],
                  "IntegrationHttpMethod": "POST",
                  "Uri": {
                      "Fn::Sub": [
                          "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations",
                          {
                              "LambdaFuncNameArn": {
                                  "Fn::GetAtt": [
                                      "LambdaFunction",
                                      "Arn"
                                  ]
                              }
                          }
                      ]
                  }
              }
          },
          "Metadata": {
              "AWS::CloudFormation::Designer": {
                  "id": "e7f8ef40-5dc7-4f7f-9701-0602ec43989c"
              }
          }
      }
  },
  "Parameters": {
      "LambdaFuncName": {
          "Type": "String",
          "Default": "Lambda_api-lambda-db"
      },
      "UsersTableName": {
          "Type": "String",
          "Default": "Users_api-lambda-db"
      },
      "EventsTableName": {
          "Type": "String",
          "Default": "Events_api-lambda-db"
      },
      "APIName": {
          "Type": "String",
          "Default": "API_api-lambda-db"
      },
      "EnvironmentName": {
          "Type": "String",
          "Default": "Prod"
      }
  },
  "Metadata": {
      "AWS::CloudFormation::Designer": {
          "e956449d-8100-4eca-9949-cde040b8e62b": {
              "size": {
                  "width": 60,
                  "height": 60
              },
              "position": {
                  "x": -210,
                  "y": 190
              },
              "z": 0,
              "embeds": []
          },
          "1af8b25f-5112-4a93-a461-29975f3c05df": {
              "size": {
                  "width": 60,
                  "height": 60
              },
              "position": {
                  "x": -210,
                  "y": 60
              },
              "z": 1,
              "embeds": [],
              "dependson": [
                  "e956449d-8100-4eca-9949-cde040b8e62b"
              ]
          },
          "a559df6f-9edd-4b46-ba7a-34fb95eba56c": {
              "size": {
                  "width": 60,
                  "height": 60
              },
              "position": {
                  "x": -330,
                  "y": 190
              },
              "z": 1,
              "embeds": [],
              "dependson": [
                  "1af8b25f-5112-4a93-a461-29975f3c05df",
                  "d77d983a-9bde-4bee-8d88-d7273b3e1c31"
              ]
          },
          "7d62156c-684e-4199-95e4-3ada5992a375": {
              "size": {
                  "width": 400,
                  "height": 370
              },
              "position": {
                  "x": -790,
                  "y": 100
              },
              "z": 1,
              "embeds": [
                  "973f2e9a-d6f7-4287-8455-c5d73141b491",
                  "82b4d9cd-c689-42f1-8474-54c4ba728b8c"
              ],
              "dependson": [
                  "a559df6f-9edd-4b46-ba7a-34fb95eba56c"
              ]
          },
          "82b4d9cd-c689-42f1-8474-54c4ba728b8c": {
              "size": {
                  "width": 260,
                  "height": 230
              },
              "position": {
                  "x": -730,
                  "y": 200
              },
              "z": 2,
              "parent": "7d62156c-684e-4199-95e4-3ada5992a375",
              "embeds": [
                  "e7f8ef40-5dc7-4f7f-9701-0602ec43989c",
                  "d50dc807-8889-4bd0-bbc4-b21a4c01cfb8"
              ],
              "iscontainedinside": [
                  "7d62156c-684e-4199-95e4-3ada5992a375"
              ],
              "dependson": [
                  "7d62156c-684e-4199-95e4-3ada5992a375"
              ]
          },
          "973f2e9a-d6f7-4287-8455-c5d73141b491": {
              "size": {
                  "width": 60,
                  "height": 60
              },
              "position": {
                  "x": -630,
                  "y": 100
              },
              "z": 2,
              "parent": "7d62156c-684e-4199-95e4-3ada5992a375",
              "embeds": [],
              "iscontainedinside": [
                  "7d62156c-684e-4199-95e4-3ada5992a375",
                  "7d62156c-684e-4199-95e4-3ada5992a375",
                  "7d62156c-684e-4199-95e4-3ada5992a375",
                  "7d62156c-684e-4199-95e4-3ada5992a375",
                  "7d62156c-684e-4199-95e4-3ada5992a375",
                  "7d62156c-684e-4199-95e4-3ada5992a375",
                  "7d62156c-684e-4199-95e4-3ada5992a375",
                  "7d62156c-684e-4199-95e4-3ada5992a375",
                  "7d62156c-684e-4199-95e4-3ada5992a375",
                  "7d62156c-684e-4199-95e4-3ada5992a375",
                  "7d62156c-684e-4199-95e4-3ada5992a375"
              ],
              "dependson": [
                  "cc85fafb-696d-4470-9e97-1b36cce1083a",
                  "d50dc807-8889-4bd0-bbc4-b21a4c01cfb8",
                  "e7f8ef40-5dc7-4f7f-9701-0602ec43989c"
              ]
          },
          "e9e6d3cd-f38a-4859-bb18-11b0fb75fa31": {
              "size": {
                  "width": 60,
                  "height": 60
              },
              "position": {
                  "x": -330,
                  "y": 30
              },
              "z": 1,
              "embeds": [],
              "isassociatedwith": [
                  "a559df6f-9edd-4b46-ba7a-34fb95eba56c"
              ],
              "dependson": [
                  "973f2e9a-d6f7-4287-8455-c5d73141b491"
              ]
          },
          "d77d983a-9bde-4bee-8d88-d7273b3e1c31": {
              "size": {
                  "width": 60,
                  "height": 60
              },
              "position": {
                  "x": -120,
                  "y": 60
              },
              "z": 0,
              "embeds": [],
              "dependson": [
                  "e956449d-8100-4eca-9949-cde040b8e62b"
              ]
          },
          "d50dc807-8889-4bd0-bbc4-b21a4c01cfb8": {
              "size": {
                  "width": 60,
                  "height": 60
              },
              "position": {
                  "x": -700,
                  "y": 260
              },
              "z": 3,
              "parent": "82b4d9cd-c689-42f1-8474-54c4ba728b8c",
              "embeds": [],
              "iscontainedinside": [
                  "82b4d9cd-c689-42f1-8474-54c4ba728b8c"
              ],
              "dependson": [
                  "82b4d9cd-c689-42f1-8474-54c4ba728b8c",
                  "7d62156c-684e-4199-95e4-3ada5992a375"
              ]
          },
          "e7f8ef40-5dc7-4f7f-9701-0602ec43989c": {
              "size": {
                  "width": 60,
                  "height": 60
              },
              "position": {
                  "x": -550,
                  "y": 260
              },
              "z": 3,
              "parent": "82b4d9cd-c689-42f1-8474-54c4ba728b8c",
              "embeds": [],
              "iscontainedinside": [
                  "82b4d9cd-c689-42f1-8474-54c4ba728b8c",
                  "7d62156c-684e-4199-95e4-3ada5992a375"
              ]
          }
      }
  }
}